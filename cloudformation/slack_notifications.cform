{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "A CloudFormation to deploy Lambdas and stuff to send notifications to Slack",
    "Metadata": {

    },
    "Parameters": {
		"pSlackChannel": {
			"Description": "Slack Channel Name",
			"Type": "String",
			"Default": "aws-spew"
		},
		"pAccountName": {
			"Description": "Account Description (ie dev-account)",
			"Type": "String"
		},
		"pArtifactBucket": {
			"Description": "Bucket Holding Lambdas",
			"Type": "String"
		},        
		"pArtifactPrefix": {
			"Description": "Directory where lambdas are",
			"Type": "String"
		},
		"pLambdaVersion": {
			"Description": "VersionPath of the Lambda zip",
			"Type": "String"
		},
		"pSlackLambdaZipFile": {
			"Description": "Filename of the Slack Lambda Zip",
			"Type": "String"
		},

		"pLambdaConfigBucket": {
			"Description": "Location of the Lambda Config Bucket",
			"Type": "String"
		},
		"pLambdaFunctionName": {
			"Description": "Name of the Lambda Function",
			"Type": "String"
		},
		"pLambdaConfigObjectBase": {
			"Description": "Prefix for all lambda configs",
			"Type": "String"
		},
		"pLambdaAlias": {
			"Description": "Alias of this Lambda Function",
			"Type": "String"
		}
    },
    "Resources": {
		"SlackEncryptionKMSKey": {
		  "Type" : "AWS::KMS::Key",
		  "Properties" : {
		    "Description" : "Slack API Encryption Key",
		    "Enabled" : "true",
		    "EnableKeyRotation" : "false",
		    "KeyPolicy" : {
		      "Version": "2012-10-17",
		      "Id": "SlackEncryptionKMSKey",
		      "Statement": [
		        {
		          "Sid": "Allow use of the key",
		          "Effect": "Allow",
		          "Principal": { "AWS": {"Fn::Join": ["", ["arn:aws:iam::", {"Ref": "AWS::AccountId"}, ":root"]]} },
		          "Action": [
		            "kms:*"
		          ], 
		          "Resource": "*"
		        }    
		      ]
		    }    
		  }
		}, 
		"SlackNotificationLambdaRole": {
		  "Type": "AWS::IAM::Role",
		  "Properties": {
		    "AssumeRolePolicyDocument": {
		       "Version" : "2012-10-17",
		       "Statement": [ {
		          "Effect": "Allow",
		          "Principal": { "Service": [ "lambda.amazonaws.com" ] },
		          "Action": [ "sts:AssumeRole" ]
		       } ]
		    },
		    "Path": "/",
		    "Policies": [ 
		      {
		        "PolicyName": "CloudWatch",
		        "PolicyDocument": {
		          "Version" : "2012-10-17",
		          "Statement": [ {
		            "Action": [ "cloudwatch:*" ],
		            "Effect": "Allow",
		            "Resource": "*"
		          } ]
		        }
		      },
		      {
		        "PolicyName": "KMS",
		        "PolicyDocument": {
		          "Version" : "2012-10-17",
		          "Statement": [ {
		            "Action": [ "kms:Decrypt" ],
		            "Effect": "Allow",
		            "Resource": { "Fn::Join": ["", ["arn:aws:kms:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":key/", {"Ref": "SlackEncryptionKMSKey"} ]]}
		          } ]
		        }
		      },
		      {
		        "PolicyName": "GetConfig",
		        "PolicyDocument": {
		          "Version" : "2012-10-17",
		          "Statement": [ {
		            "Action": [ "s3:*" ],
		            "Effect": "Allow",
		            "Resource": {"Fn::Join": ["", [ "arn:aws:s3:::", { "Ref": "pLambdaConfigBucket"}, "/",
									{ "Ref": "pLambdaConfigObjectBase"}, "/", { "Ref": "pLambdaAlias"}, "/",
									{ "Ref": "pLambdaFunctionName"}, "/*" ]]}
		          } ]
		        }
		      },   
		      {
		        "PolicyName": "EC2DescribeInstances",
		        "PolicyDocument": {
		          "Version" : "2012-10-17",
		          "Statement": [ {
		            "Action": [ "ec2:Describe*" ],
		            "Effect": "Allow",
		            "Resource": "*"
		          } ]
		        }
		      },                 
		      {
		        "PolicyName": "logs",
		        "PolicyDocument": {
		          "Version" : "2012-10-17",
		          "Statement": [ {
		            "Resource": "*",
		            "Action": [ "logs:*" ],
		            "Effect": "Allow"
		          } ]
		        }
		      }
		    ]
		  }
		},
		"SlackNotificationLambda": {
		    "Type": "AWS::Lambda::Function",
		    "Properties": {
		        "Description": "Send Cloudwatch Events to Slack",
		        "Runtime": "nodejs4.3",
		        "Handler": "slack_notify_lambda.handler",
		        "Timeout": "80",
		        "FunctionName": {"Ref": "pLambdaFunctionName"},
		        "Code": {
		          "S3Bucket": { "Ref": "pArtifactBucket" },
		          "S3Key" : { "Fn::Join": ["/", [ {"Ref": "pArtifactPrefix"}, {"Ref": "pLambdaVersion"}, {"Ref": "pSlackLambdaZipFile"}]]}
		        },
		        "Role":  { "Fn::GetAtt" : ["SlackNotificationLambdaRole", "Arn"] } 
		    }
		},
		"SlackNotificationLambdaAlias" : {
			"Type" : "AWS::Lambda::Alias",
			"Properties" : {
				"FunctionName" : { "Ref" : "SlackNotificationLambda" },
				"FunctionVersion" : "$LATEST",
				"Name" : {"Ref": "pLambdaAlias"}
			}
		},
		"SlackNotificationLambdaInvocationRole": {
		  "Type": "AWS::IAM::Role",
		  "Properties": {
		    "AssumeRolePolicyDocument": {
				"Version" : "2012-10-17",
				"Statement": [ 
				{
					"Effect": "Allow",
					"Principal": { "Service": [ "events.amazonaws.com", "sns.amazonaws.com" ] },
					"Action": [ "sts:AssumeRole" ]
				}
				]
		    },
		    "Path": "/",
		    "Policies": [ 
		      {
		        "PolicyName": "ExecuteSlackLambda",
		        "PolicyDocument": {
		          "Version" : "2012-10-17",
		          "Statement": [ {
		            "Action": [ "lambda:InvokeFunction" ],
		            "Effect": "Allow",
		            "Resource": [ { "Fn::GetAtt": ["SlackNotificationLambda", "Arn"] } ]
		          } ]
		        }
		      }
		    ]
		  }
		},

		"Ec2StartStopRule": {
		    "Type": "AWS::Events::Rule",
		    "Properties": {
		        "Name": "InstanceStateChangeToSlack",
		        "Description": "Send Instance State Change notifications to Slack (via Lambda)",
		        "EventPattern": { 
		            "source": [ "aws.ec2"],
		            "detail-type": [ "EC2 Instance State-change Notification" ]
		        },
		        "State": "ENABLED",
		        "RoleArn":{ "Fn::GetAtt": ["SlackNotificationLambdaInvocationRole", "Arn"] },
		        "Targets": [{
					"Arn": {"Ref": "SlackNotificationLambdaAlias"},
		            "Id": "TargetFunctionV1"
		        }]
		    }
		},
		"SlackNotificationLambdaPermissionEc2StartStopRule" : {
				"Type" : "AWS::Lambda::Permission",
				"Properties" : {
					"FunctionName" : { "Fn::GetAtt" : [ "SlackNotificationLambda", "Arn" ] },
					"Principal" : "events.amazonaws.com",
					"SourceArn": {"Fn::GetAtt": ["Ec2StartStopRule", "Arn"] },
					"Action" : "lambda:invokeFunction"
				}
		},		
		"ConsoleLoginRule": {
		    "Type": "AWS::Events::Rule",
		    "Properties": {
		        "Name": "ConsoleLoginToSlack",
		        "Description": "Send Console Logins to Slack (via Lambda)",
		        "EventPattern": { 
		            "source": [ "aws.signin"],
		            "detail-type": [ "AWS Console Sign In via CloudTrail" ]
		        },
		        "State": "ENABLED",
		        "RoleArn":{ "Fn::GetAtt": ["SlackNotificationLambdaInvocationRole", "Arn"] },
		        "Targets": [{
					"Arn": {"Ref": "SlackNotificationLambdaAlias"},
		            "Id": "TargetFunctionV1"
		        }]
		    }
		},
		"SlackNotificationLambdaPermissionConsoleLoginRule" : {
				"Type" : "AWS::Lambda::Permission",
				"Properties" : {
					"FunctionName" : { "Fn::GetAtt" : [ "SlackNotificationLambda", "Arn" ] },
					"Principal" : "events.amazonaws.com",
					"SourceArn": {"Fn::GetAtt": ["ConsoleLoginRule", "Arn"] },
					"Action" : "lambda:invokeFunction"
				}
		},		
		"CloudFormationRule": {
		    "Type": "AWS::Events::Rule",
		    "Properties": {
		        "Name": "CloudFormationEventsToSlack",
		        "Description": "Send CFN Stack Change notifications to Slack (via Lambda)",
		        "EventPattern": { 
		            "source": [ "cloudformation.amazonaws.com"],
		            "detail-type": [ "AWS API Call via CloudTrail" ]
		        },
		        "State": "ENABLED",
		        "RoleArn":{ "Fn::GetAtt": ["SlackNotificationLambdaInvocationRole", "Arn"] },
		        "Targets": [{
					"Arn": {"Ref": "SlackNotificationLambdaAlias"},
		            "Id": "TargetFunctionV1"
		        }]
		    }
		},
		"SlackNotificationLambdaPermissionCloudFormationRule" : {
				"Type" : "AWS::Lambda::Permission",
				"Properties" : {
					"FunctionName" : { "Fn::GetAtt" : [ "SlackNotificationLambda", "Arn" ] },
					"Principal" : "events.amazonaws.com",
					"SourceArn": {"Fn::GetAtt": ["CloudFormationRule", "Arn"] },
					"Action" : "lambda:invokeFunction"
				}
		},			
		"IAMActivityRule": {
		    "Type": "AWS::Events::Rule",
		    "Properties": {
		        "Name": "IAMActivitiesToSlack",
		        "Description": "Send IAM Activity to Slack (via Lambda)",
		        "EventPattern": { 
		            "source": [ "iam.amazonaws.com" ],
		            "detail-type": [  "AWS API Call via CloudTrail" ]
		        },
		        "State": "ENABLED",
		        "RoleArn":{ "Fn::GetAtt": ["SlackNotificationLambdaInvocationRole", "Arn"] },
		        "Targets": [{
					"Arn": {"Ref": "SlackNotificationLambdaAlias"},
		            "Id": "TargetFunctionV1"
		        }]
		    }
		},
		"SlackNotificationLambdaPermissionIAMActivityRule" : {
				"Type" : "AWS::Lambda::Permission",
				"Properties" : {
					"FunctionName" : { "Fn::GetAtt" : [ "SlackNotificationLambda", "Arn" ] },
					"Principal" : "events.amazonaws.com",
					"SourceArn": {"Fn::GetAtt": ["IAMActivityRule", "Arn"] },
					"Action" : "lambda:invokeFunction"
				}
		}
    },
	"Outputs": {
		"KmsKeyId": {
			"Value": {"Ref": "SlackEncryptionKMSKey"}
		},
		"LambdaConfigPath": {
			"Value": {"Fn::Join": ["", [ { "Ref": "pLambdaConfigBucket"}, "/",
									{ "Ref": "pLambdaConfigObjectBase"}, "/", { "Ref": "pLambdaAlias"}, "/",
									{ "Ref": "pLambdaFunctionName"} ]]}
		},
		"SlackNotificationLambdaArn": {
			"Value": {"Fn::GetAtt": ["SlackNotificationLambda", "Arn"]},
			"Description": "ARN for the Slack Gateway Lambda"
		},
		"StackName": {
			"Value": {"Ref": "AWS::StackName"}
		}
	}
}
    
